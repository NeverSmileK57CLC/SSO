{
  "name": "SSO",
  "tagline": "Single Sign On with OAuth2",
  "body": "# Single Sign On (SSO) là gì?\r\n>Theo Wikipedia Single Sign On là một thuật ngữ của việc kiểm soát truy cập nhiều hệ thống liên quan. Với việc sử dụng thuật ngữ này cho phép người dùng đăng nhập với một ID và mật khẩu duy nhất để có thể truy cập vào một hệ thống hay nhiều hệ thống kết nối với nhau mà không cần sử dụng nhiều tên đăng nhập và mật khẩu khác nhau của từng hệ thống.\r\n\r\nHay nói một cách đơn giản Single Sign On nghĩa là khi người dùng đăng nhập vào một hệ thống, họ sẽ đăng nhập vào tất cả các hệ thống khác liên quan.\r\n\r\nMột ví dụ điển hình cho việc ứng dụng thuật ngữ này là Google, Google sử dụng cho những sản phẩm của họ như: Gmail, YouTube, Google Maps... Điều này được thực hiển bởi một \"dịch vụ trung tâm\" (trong trường hợp Google là [https://accounts.google.com](https://accounts.google.com)).\r\n\r\nKhi bạn đăng nhập lần đầu tiên, cookie được khởi tạo ở \"dịch vụ trung tâm\", sau đó khi bạn truy cập vào hệ thống thứ hai thì trình duyệt sẽ chuyển hướng tới trung tâm nhưng bạn đã có cookie khi đăng nhập từ trước nên điều đó có nghĩa là bạn đã đăng nhập thành công vào các hệ thống còn lại.\r\n\r\nNgược lại, Single Sign Off là thuật ngữ mà theo đó khi người dùng đăng xuất khỏi hệ thống sẽ chấm dứt quyền truy cập vào các hệ thống còn lại.\r\n### Luồng chạy chính của hệ thống sử dụng SSO\r\n- Client redirect người dùng tới Provider cho việc xác minh\r\n- Người dùng đăng nhập vào Provider\r\n- Provider redirect người dùng trở lại Client với một `token` được sinh ra ngẫu nhiên\r\n- Client sử dụng `token` đó để tạo lời gọi API tới Provider cùng với ID và Secret Key tạo nên `Access Token`\r\n- Những request sau được xác minh thông qua `Access Token`\r\n- Đăng xuất xóa bỏ session ở Client cũng như Provider và database\r\n\r\n# Cách Implement SSO trong ứng dụng Rails\r\nBây giờ tôi sẽ hướng dẫn bạn demo một hệ thống có sử dụng SSO trong rails.\r\n\r\nTôi giả sử bạn đã có một hệ thống gọi là Provider dùng để xử lý đăng nhập và một hệ thống gọi là Client dùng đăng nhập thông qua Provider. Provider đã có các chức năng để đăng nhập, đăng xuất, lưu thông tin người dùng vào database.\r\n\r\n## 1. Về phía Provider\r\n* Thêm gem omniauth vào `Gemfile`\r\n```Ruby\r\ngem \"omniauth\"\r\n```\r\n* Tạo `access_grants` dùng để lưu `token` và thông tin về quyền đăng nhập\r\n```\r\n    $ rails g model AccessGrant code access_token refresh_token access_token_expires_at user:references state:integer\r\n```\r\n* Tạo một migration thêm 2 trường `provider` và `uid` vào bảng Users\r\n```\r\n    $ rails g migration add_provider_and_uid_to_users provider uid\r\n```\r\n* Trong model `AccessGrant` ta định nghĩa các hàm như generate_tokens để tạo các token, redirect_uri_for hay authenticate `app/model/access_grant.rb`\r\n```Ruby\r\n    class AccessGrant < ActiveRecord::Base\r\n      def generate_tokens\r\n        self.code = SecureRandom.hex 16\r\n        self.access_token = SecureRandom.hex 16\r\n        self.refresh_token = SecureRandom.hex 16\r\n      end\r\n\r\n      def redirect_uri_for redirect_uri\r\n        if redirect_uri =~ /\\?/\r\n          redirect_uri + \"&code=#{code}&response_type=code&state#{state}\"\r\n        else\r\n          redirect_uri + \"?code=#{code}&response_type=code&state=#{state}\"\r\n        end\r\n      end\r\n\r\n      def start_expiry_period!\r\n        update_attribute :access_token_expires_at, Time.now + Devise.timeout_in\r\n      end\r\n\r\n      class << self\r\n        def authenticate code\r\n          AccessGrant.find_by code: code\r\n        end\r\n      end\r\n    end\r\n```\r\n* Tạo auth_controller dùng để tạo `access_token` và authorize `app/controller/auth_controller.rb`\r\n```Ruby\r\n    class AuthController < ApplicationController\r\n      def authorize\r\n        # Hàm này sẽ được gọi khi user đăng nhập vào provider\r\n        create_hash = {\r\n          state: params[:state]\r\n        }\r\n        access_grant = current_user.access_grants.create create_hash\r\n        redirect_to access_grant.redirect_uri_for params[:redirect_uri]\r\n      end\r\n\r\n      def access_token\r\n        access_grant = AccessGrant.authenticate params[:code]\r\n        if access_grant.nil?\r\n          return\r\n        end\r\n        access_grant.start_expiry_period!\r\n        render :json => {:access_token => access_grant.access_token, :refresh_token => access_grant.refresh_token,\r\n          :expires_in => Devise.timeout_in.to_i}\r\n      end\r\n    end\r\n```\r\nSau đó ta thêm một hàm để lấy thông tin mà provider sẽ trả về cho client ở trong `auth_controlller.rb`\r\n```Ruby\r\n    def user\r\n      hash = {\r\n        provider: \"framgia\",\r\n        id: current_user.id.to_s,\r\n        info: {\r\n           email: current_user.email,\r\n        },\r\n        extra: {\r\n          gender: current_user.gender,\r\n          position: current_user.position,\r\n          university: current_user.university\r\n        }\r\n      }\r\n      render :json => hash.to_json\r\n    end\r\n```\r\n* Thêm các route `config/routes.rb`\r\n```Ruby\r\n    get \"/auth/framgia/authorize\" => \"auth#authorize\"\r\n    post \"/auth/framgia/access_token\" => \"auth#access_token\"\r\n    get \"/auth/framgia/user\" => \"auth#user\"\r\n    post \"/oauth/token\" => \"auth#access_token\"\r\n```\r\nNhư thế là xong cho phần Provider, tiếp theo ta sẽ cài đặt cho phần Client để có thể redirect đến Provider đăng nhập là lấy thông tin trả về.\r\n## 2. Về phía Client\r\n* Tạo bảng `Users` gồm những thông tin cơ bản\r\n```\r\n    $ rails g model User uid email status:integer\r\n```\r\n* Ta thêm các route để xử lý khi Provider callback khi đăng nhập thành công, failure hay khi logout\r\n```Default\r\n    post '/auth/:provider/callback' => 'user_sessions#create'\r\n    get '/auth/failure' => 'user_sessions#failure'\r\n    delete '/logout', :to => 'user_sessions#destroy'\r\n```\r\n* Tạo thư việc Provider xử lý việc lấy thông tin như thế nào khi Provider trả thông tin về `lib/framgia.rb`\r\n```Ruby\r\n    require 'omniauth-oauth2'\r\n    module OmniAuth\r\n      module Strategies\r\n        class Framgia < OmniAuth::Strategies::OAuth2\r\n          # Link tới Provider\r\n          CUSTOM_PROVIDER_URL = 'http://localhost:4000'\r\n\r\n          option :client_options, {\r\n            :site =>  CUSTOM_PROVIDER_URL,\r\n            :authorize_url => \"#{CUSTOM_PROVIDER_URL}/auth/sso/authorize\",\r\n            :access_token_url => \"#{CUSTOM_PROVIDER_URL}/auth/sso/access_token\"\r\n          }\r\n\r\n          uid do\r\n            raw_info['id']\r\n          end\r\n\r\n          info do\r\n            {\r\n              :email => raw_info['info']['email']\r\n            }\r\n          end\r\n\r\n          extra do\r\n            {\r\n              :first_name => raw_info['extra']['first_name'],\r\n              :last_name  => raw_info['extra']['last_name']\r\n            }\r\n          end\r\n\r\n          def raw_info\r\n            @raw_info ||= access_token.get(\"/auth/framgia/user.json?oauth_token=#{access_token.token}\").parsed\r\n          end\r\n        end\r\n      end\r\n    end\r\n```\r\n* Vì OmniAuth được xây dựng cho việc xác minh multi-provider, nên nó cung cấp một class `OmniAuth::Builder` cho phép ta dễ dàng lựa chọn. Dưới đây là một ví dụ\r\n`config/initializers/omniauth.rb`\r\n```Ruby\r\n    APP_ID = 'key'\r\n    APP_SECRET = 'secret'\r\n\r\n    Rails.application.config.middleware.use OmniAuth::Builder do\r\n      provider :framgia, APP_ID, APP_SECRET\r\n    end\r\n```\r\n* Tiếp theo ta xử lý việc khi người dùng login thành công, thất bại hay logout ở `sessions_controller`\r\n```Ruby\r\n    class SessionsController < ApplicationController\r\n      def create\r\n        omniauth = env['omniauth.auth']\r\n        user = User.find_by_uid(omniauth['uid'])\r\n        if not user\r\n          # New user registration\r\n          user = User.new(:uid => omniauth['uid'])\r\n        end\r\n        user.email = omniauth['info']['email']\r\n        user.save\r\n        session[:user_id] = omniauth\r\n        redirect_to root_path\r\n      end\r\n\r\n      def failure\r\n        flash[:notice] = params[:message]\r\n      end\r\n\r\n      def destroy\r\n        session[:user_id] = nil\r\n        redirect_to \"#{CUSTOM_PROVIDER_URL}/users/sign_out\"\r\n      end\r\n    end\r\n```\r\n* Một điều cũng không kém phần quan trọng là ta phải import provider vào môi trường `config/environment.rb`\r\n```Ruby\r\n    require \"framgia\"\r\n```\r\n\r\nVậy là xong phần cài đặt cho Client, ngoài ra bạn có thể thêm khảo thêm project mẫu\r\nProvider: [https://github.com/joshsoftware/sso-devise-omniauth-provider](https://github.com/joshsoftware/sso-devise-omniauth-provider)\r\n\r\nClient: [https://github.com/joshsoftware/sso-devise-omniauth-client](https://github.com/joshsoftware/sso-devise-omniauth-client)\r\n# Kết luận\r\nSingle Sign On là một kỹ thuật rất hay, áp dụng khi ta muốn tập trung hóa việc đăng nhập, quản lý các hệ thống lớn hoặc đơn giản là xác minh để lấy API.\r\n\r\nLợi ích của nó thì rất rõ ràng: giảm thiểu rủi ro cho việc truy cập đến trang web của bên thứ ba, giảm thời gian cho người dùng khi phải đăng nhập nhiều lần.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}